#include <iostream>
#include <algorithm>
#include <cstdio>
#include <string>
#include <cstring>
#include <cstdlib>
#include <map>
#include <vector>
#include <set>
#include <queue>
#include <stack>
#include <cmath>
using namespace std;
#define mem(s,t) memset(s,t,sizeof(s))
#define pq priority_queue
#define pb push_back
#define fi first
#define se second
#define TLE std::ios::sync_with_stdio(false);   cin.tie(NULL);   cout.tie(NULL);   cout.precision(10);
const int mxn = 100+5;
int n,m,sign[mxn];
struct node
{
    int x,y,v;
    bool operator < (const node & a) const
    {
        return v<a.v;
    }
}root[50+5];
void init() {for(int i=0;i<mxn;i++) sign[i]=i;}
int find(int x)
{
    if(x==sign[x]) return x;
    else
    {
        sign[x] = find(sign[x]);
        return sign[x];
    }
}
int GetRoot(int x,int y)
{
    int l = find(x),
        r = find(y);
    if(l==r) return 0;
    else
    {
        sign[l] = r;
        return 1;
    }
}
int main()
{
    TLE;
    while((cin>>n)&&n)
    {
        init();
        int ans = 0,cnt = 0;
        cin>>m;
        for(int i=0;i<m;i++)
            cin>>root[i].x>>root[i].y>>root[i].v;
        sort(root,root+m);
        for(int i=0;i<m;i++)
        {
            if(GetRoot(root[i].x,root[i].y))
            {
                cnt+=1;
                ans+=root[i].v;
            }
            if(cnt==n-1) break;
        }
        cout<<ans<<endl;
    }
    return 0;
}
